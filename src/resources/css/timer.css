.timer {
    padding: 4px 5px 4px;
    background: -webkit-linear-gradient(top, #222, #444);
    overflow: hidden;
    display: inline-block;
    border: 2px solid #efefef;
    border-radius: 2px;
    position: relative;
    
    box-shadow: 
    inset 0 -2px 10px 1px rgba(0, 0, 0, 0.75), 
    0 5px 20px -10px rgba(0, 0, 0, 1);
}

.tcell {
    /*Should only display 1 digit. Hence height = line height of .numbers      and width = width of .numbers*/
    width: 0.60em;
    height: 15px;
    font-size: 22px;
    overflow: hidden;
    position: relative;
    float: left;
}

.numbers {
    width: 0.6em;
    line-height: 15px;
    font-family: digital, arial, verdana;
    text-align: center;
    color: yellow;
    
    position: absolute;
    top: 0;
    left: 0;
    
    /*Glow to the text*/
    text-shadow: 0 0 5px rgba(255, 255, 255, 1);
}

input[name="tcontrols"] {display: none;}

/*Control code*/
#stop:checked~.timer .numbers {-webkit-animation-play-state: paused;}
#start:checked~.timer .numbers {-webkit-animation-play-state: running;}
#reset:checked~.timer .numbers {-webkit-animation: none;}

.moveten {
    /*The digits move but dont look good. We will use steps now      10 digits = 10 steps. You can now see the digits swapping instead of
      moving pixel-by-pixel*/
    -webkit-animation: moveten 1s steps(10, end) infinite;
    /*By default animation should be paused*/
    -webkit-animation-play-state: paused;
}
.movesix {
    -webkit-animation: movesix 1s steps(6, end) infinite;
    -webkit-animation-play-state: paused;
}

/*Now we need to sync the animation speed with time speed*/
/*One second per digit. 10 digits. Hence 10s*/
.second {-webkit-animation-duration: 10s;}
.tensecond {-webkit-animation-duration: 60s;} /*60 times .second*/


.minute {-webkit-animation-duration: 600s;} /*60 times .second*/
.tenminute {-webkit-animation-duration: 3600s;} /*60 times .minute*/


/*The stopwatch looks good now. Lets add some styles*/

/*Lets animate the digit now - the main part of this tutorial*/
/*We are using prefixfree, so no need of vendor prefixes*/
/*The logic of the animation is to alter the 'top' value of the absolutely  positioned .numbers*/
/*Minutes and Seconds should be limited to only '60' and not '100'  Hence we need to create 2 animations. One with 10 steps and 10 digits and
  the other one with 6 steps and 6 digits*/
@-webkit-keyframes moveten {
    0% {top: 0;}
    100% {top: -150px;} 
/*height = 40. digits = 10. hence -400 to move it completely to the top*/
}

@-webkit-keyframes movesix {
    0% {top: 0;}
    100% {top: -90px;} 
/*height = 40. digits = 6. hence -240 to move it completely to the top*/
}


/*Lets use a better font for the numbers*/
@font-face {
    font-family: 'digital';
    src: url("../font/ds-digi.ttf");    
}
